import 'dart:io';

import 'package:collection/collection.dart';
import 'package:sysmac_cmd/domain/namespace.dart';

class EventGroup extends NameSpace {
  EventGroup(String name) : super(name);
}

class Event extends NameSpace {
  final String groupName1;
  final String groupName2;
  final String id;
  final String componentCode;
  final String expression;
  final EventPriority priority;
  final String message;
  final String explanation;
  final bool popup;
  final bool acknowledge;

  Event(
      {required this.groupName1,
      required this.groupName2,
      required this.id,
      required this.componentCode,
      required this.expression,
      required this.priority,
      required this.message,
      required this.explanation,
      required this.popup,
      required this.acknowledge})
      : super(expression);

  @override
  String toString() {
    return 'Event{groupName1: $groupName1, groupName2: $groupName2, id: $id, componentCode: $componentCode, expression: $expression, priority: $priority, message: $message, explanation: $explanation, popup: $popup, acknowledge: $acknowledge}';
  }
}

class EventPriority {
  final String name;
  final String abbreviation;
  final int level;
  final String description;
  final String example;

  EventPriority({
    required this.name,
    required this.abbreviation,
    required this.level,
    required this.description,
    required this.example,
  });

  String get omronPriority =>
      (level > 0 && level < 9) ? "UserFaultLevel$level" : "UserInformation";

  @override
  String toString() {
    return 'EventPriority{name: $name}';
  }
}

class EventPriorities extends DelegatingList<EventPriority> {
  static final EventPriorities _singleton = EventPriorities._internal();

  factory EventPriorities() => _singleton;

  EventPriorities._internal()
      : super([
          EventPriority(
            name: 'Fatal',
            abbreviation: 'F',
            level: 1,
            description:
                'A fatal problem that prevents the system from working (fatal for system).',
            example:
                'An EtherCAT error, an important fuse of the control system, missing IO cards, critical IO card errors, etc.',
          ),
          EventPriority(
            name: 'Critical',
            abbreviation: 'C',
            level: 2,
            description: 'A critical problem that stops the system.',
            example:
                'An emergency stop, a critical motor tripped, low hydraulic level, etc.',
          ),
          EventPriority(
            name: 'High',
            abbreviation: 'H',
            level: 3,
            description:
                'A problem with major consequences, but system keeps running.',
            example: 'Direct action is needed, e.g.: an important motor tripped, etc.',
          ),
          EventPriority(
            name: 'Medium High',
            abbreviation: 'MH',
            level: 4,
            description: 'A problem with moderate consequences.',
            example: 'Urgent action is required.',
          ),
          EventPriority(
            name: 'Medium',
            abbreviation: 'M',
            level: 5,
            description: 'A problem with some consequences.',
            example:
                'Action within 5 minutes is required, e.g. when a low temperature is detected.',
          ),
          EventPriority(
              name: 'Medium Low',
              abbreviation: 'ML',
              level: 6,
              description: 'A problem with minor consequences.',
              example: 'Action within 15 minutes is required.'),
          EventPriority(
            name: 'Low',
            abbreviation: 'L',
            level: 7,
            description: 'A problem with almost no consequences.',
            example:
                'Eventually action is required, e.g. a tripped plucker motor.',
          ),
          EventPriority(
              name: 'Info',
              abbreviation: 'I',
              level: 9,
              description:
                  'All events that are not an error, such as information for the operator',
              example:
                  'When a stop button is pressed, or external stop is activated.')
        ]);

  static writeMarkDownTemplateFile() {
    String markdown =
        '[//]: # (This file was generated by $EventPriorities.writeMarkDownTemplateFile() on: ${DateTime.now()})\n';
    markdown +=
        '| Priority | Abbreviation | Omron Priority | Description | Example |\n';
    markdown += '| --- | --- | --- | --- | --- |\n';
    for (var priority in EventPriorities()) {
      markdown +=
          '| ${priority.name} | ${priority.abbreviation} | ${priority.omronPriority} | ${priority.description} | ${priority.example} |\n';
    }
    File('doc/template/$EventPriorities.mdt').writeAsStringSync(markdown);
  }
}
